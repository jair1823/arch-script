#!/bin/bash
# *--------------------------------------------
# !Created by jair1823
# *--------------------------------------------
# Based on <https://github.com/helmuthdu/aui>

# *--------------------------------------------
# !Check help funtions file
if [ -e $(pwd)/help-funtions ]; then
  source help-funtions
else
  echo "missing file: help-funtions"
  exit 1
fi

# *--------------------------------------------
#! select keymap
select_keymap() {
  print_title "KEYMAP - https://wiki.archlinux.org/index.php/KEYMAP"
  keymap_list=("us" "us-acentos")
  PS3="$prompt1"
  print_info "El KEYMAP define la distribucion del teclado."
  echo "keymap list in /usr/share/kbd/keymaps"
  select KEYMAP in "${keymap_list[@]}"; do
    if contains_element "$KEYMAP" "${keymap_list[@]}"; then
      loadkeys "$KEYMAP"
      break
    else
      invalid_option
    fi
  done
}
#! select editor
select_editor() {
  print_title "Text Editor - https://wiki.archlinux.org/"
  editor_list=("vim" "nvim" "nano")
  PS3="$prompt1"
  print_info "Se selecciona e instala el editor que se usara por defecto."
  select EDITOR in "${editor_list[@]}"; do
    if contains_element "$EDITOR" "${editor_list[@]}"; then
      pacman -Sy --needed "$EDITOR" --noconfirm
      break
    else
      invalid_option
    fi
  done
}
#! select mirrors
select_mirrors() {
  #todo Lista de seleccion
  country_code="US"
  country_name="Unite States"
  url="https://www.archlinux.org/mirrorlist/?country=${country_code}&use_mirror_status=on"
  #archivo temporal
  tempFile=$(mktemp --suffix=mirrorlist)

  curl -so ${tempFile} ${url}
  sed -i 's/^#Server/Server/g' ${tempFile}

  #copiando el nuevo mirrorlist solo si no esta vacio
  if [[ -s ${tempFile} ]]; then
    {
      echo " Backing up the original mirrorlist..."
      mv -i /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist.orig
    } &&
      {
        echo " Rotating the new list into place..."
        mv -i ${tempFile} /etc/pacman.d/mirrorlist
      }
  else
    echo " Unable to update, could not download list."
  fi
  # better repo should go first
  pacman -Sy pacman-contrib --noconfirm
  cp /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist.tmp
  echo "Rankmirrors..."
  rankmirrors /etc/pacman.d/mirrorlist.tmp >/etc/pacman.d/mirrorlist
  rm /etc/pacman.d/mirrorlist.tmp
  # allow global read access (required for non-root yaourt execution)
  chmod +r /etc/pacman.d/mirrorlist
  $EDITOR /etc/pacman.d/mirrorlist
}

# *--------------------------------------------
#! Umount Partions
umount_partitions() {
  mounted_partitions=($(lsblk | grep ${MOUNTPOINT} | awk '{print $7}' | sort -r))
  swapoff -a
  for i in ${mounted_partitions[@]}; do
    umount $i
  done
}
#! Select device
select_device() {
  devices_list=($(lsblk -d | awk '{print "/dev/" $1}' | grep 'sd\|hd\|vd\|nvme\|mmcblk'))
  PS3="$prompt1"
  echo -e "Attached Devices:\n"
  lsblk -lnp -I 2,3,8,9,22,34,56,57,58,65,66,67,68,69,70,71,72,91,128,129,130,131,132,133,134,135,259 | awk '{print $1,$4,$6,$7}' | column -t
  echo -e "\n"
  echo -e "Select device to partition:\n"
  select device in "${devices_list[@]}"; do
    if contains_element "${device}" "${devices_list[@]}"; then
      break
    else
      invalid_option
    fi
  done
  BOOT_MOUNTPOINT=$device
}
#! Create Partitons
create_partition() {
  select_device
  cfdisk $device
}

#! Format Partions
format_partitions() {
  print_title "https://wiki.archlinux.org/index.php/File_Systems"
  print_info "This step will select and format the selected partition where archlinux will be installed"
  print_danger "\tAll data on the ROOT and SWAP partition will be LOST."
  i=0

  block_list=($(lsblk | grep 'part\|lvm' | awk '{print substr($1,3)}'))

  # check if there is no partition
  if [[ ${#block_list[@]} -eq 0 ]]; then
    echo "No partition found"
    exit 0
  fi

  partitions_list=()
  for OPT in ${block_list[@]}; do
    check_lvm=$(echo $OPT | grep lvm)
    if [[ -z $check_lvm ]]; then
      partitions_list+=("/dev/$OPT")
    else
      partitions_list+=("/dev/mapper/$OPT")
    fi
  done

  # partitions based on boot system
  if [[ $UEFI -eq 1 ]]; then
    partition_name=("root" "EFI" "swap" "another")
  else
    partition_name=("root" "swap" "another")
  fi

  disable_partition() {
    #remove the selected partition from list
    unset partitions_list[${partition_number}]
    partitions_list=(${partitions_list[@]})
    #increase i
    [[ ${partition_name[i]} != another ]] && i=$((i + 1))
  }

  format_partition() {
    read_input_text "Format $1 partition"
    if [[ $OPTION == y ]]; then
      #aqui puedo hacer una funcion de selecionar filesystem
      filesystem=$3
      mkfs.${filesystem} $1 \
        $([[ ${filesystem} == vfat ]] && echo "-F32")
      fsck $1
      mkdir -p $2
      mount -t ${filesystem} $1 $2
      disable_partition
    fi
  }

  format_swap_partition() {
    read_input_text "Confirm format $1 partition"
    if [[ $OPTION == y ]]; then
      mkswap $1
      swapon $1
      disable_partition
    fi
  }

  create_swap() {
    swap_options=("partition")
    PS3="$prompt1"
    echo -e "Select ${BYellow}${partition_name[i]}${Reset} filesystem:\n"
    select OPT in "${swap_options[@]}"; do
      case "$REPLY" in
      1)
        select partition in "${partitions_list[@]}"; do
          #get the selected number - 1
          partition_number=$(($REPLY - 1))
          if contains_element "${partition}" "${partitions_list[@]}"; then
            format_swap_partition "${partition}"
          fi
          break
        done
        swap_type="partition"
        break
        ;;
      *)
        invalid_option
        ;;
      esac
    done
  }

  while true; do
    PS3="$prompt1"
    if [[ ${partition_name[i]} == swap ]]; then
      create_swap
    else
      echo -e "Select ${BYellow}${partition_name[i]}${Reset} partition:\n"
      select partition in "${partitions_list[@]}"; do
        #get the selected number - 1
        partition_number=$(($REPLY - 1))
        if contains_element "${partition}" "${partitions_list[@]}"; then
          case ${partition_name[i]} in
          root)
            ROOT_MOUNTPOINT=${partition}
            format_partition "${partition}" "${MOUNTPOINT}" ext4
            ;;
          EFI)
            format_partition "${partition}" "${MOUNTPOINT}${EFI_MOUNTPOINT}" vfat
            ;;
          another)
            print_danger "Another"
            wait_enter
            break
            ;;
          esac
          break
        else
          invalid_option
        fi
      done
    fi
    #check if there is no partitions left
    if [[ ${#partitions_list[@]} -eq 0 && ${partition_name[i]} != swap ]]; then
      break
    elif [[ ${partition_name[i]} == another ]]; then
      read_input_text "Configure more partitions"
      [[ $OPTION != y ]] && break
    fi
  done
  wait_enter
}

# *--------------------------------------------
# !Before Menu
print_title "https://wiki.archlinux.org/index.php/Installation_guide"
print_info "Script para la ayuda de instalacion basica de Arch."
wait_enter
check_connection
check_boot_system
pacman -Sy

# *--------------------------------------------
# !MAIN MENU
while true; do
  print_title "Installation options"
  echo "  Boot System: ${BOOT_SYSTEM}"
  echo ""
  echo ""
  echo "  1) $(mainmenu_item "${checklist[1]}" "Select keymap" "${KEYMAP}")"
  echo "  2) $(mainmenu_item "${checklist[2]}" "Select Editor" "${EDITOR}")"
  echo "  3) $(mainmenu_item "${checklist[3]}" "Select Mirrors" "${country_name} ${country_code}")"
  echo "  4) $(mainmenu_item "${checklist[4]}" "Create partions" "Ready")"
  echo ""
  echo "  d) done"
  echo ""
  read -p "$prompt1" option
  case $option in
  1)
    select_keymap
    checklist[1]=1
    ;;
  2)
    select_editor
    checklist[2]=1
    ;;
  3)
    select_mirrors
    checklist[3]=1
    ;;
  4)
    umount_partitions
    create_partition
    format_partitions
    checklist[4]=1
    ;;
  d)
    wait_enter 0
    ;;
  *)
    invalid_option
    ;;
  esac

done
# *--------------------------------------------
